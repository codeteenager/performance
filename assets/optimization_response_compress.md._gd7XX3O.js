import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.fAsUD1FY.js";const d=JSON.parse('{"title":"压缩构建的数据资源","description":"","frontmatter":{},"headers":[],"relativePath":"optimization/response/compress.md","filePath":"optimization/response/compress.md","lastUpdated":1683291227000}'),p={name:"optimization/response/compress.md"},o=l(`<h1 id="压缩构建的数据资源" tabindex="-1">压缩构建的数据资源 <a class="header-anchor" href="#压缩构建的数据资源" aria-label="Permalink to &quot;压缩构建的数据资源&quot;">​</a></h1><p>数据压缩是提高 Web 站点性能的一种重要手段。对于有些文件来说，高达 70% 的压缩比率可以大大减低对于带宽的需求。随着时间的推移，压缩算法的效率也越来越高，同时也有新的压缩算法被发明出来，应用在客户端与服务器端。</p><h2 id="http-响应数据压缩" tabindex="-1">HTTP 响应数据压缩 <a class="header-anchor" href="#http-响应数据压缩" aria-label="Permalink to &quot;HTTP 响应数据压缩&quot;">​</a></h2><h3 id="压缩-js、css" tabindex="-1">压缩 JS、CSS <a class="header-anchor" href="#压缩-js、css" aria-label="Permalink to &quot;压缩 JS、CSS&quot;">​</a></h3><p>这里所说的压缩指的是去除换行空格之类的压缩，文件内容不变。</p><h3 id="使用-gzip-压缩文本" tabindex="-1">使用 Gzip 压缩文本 <a class="header-anchor" href="#使用-gzip-压缩文本" aria-label="Permalink to &quot;使用 Gzip 压缩文本&quot;">​</a></h3><p>浏览器和服务器之间会使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noreferrer">主动协商机制</a>。浏览器发送 Accept-Encoding 首部，其中包含有它所支持的压缩算法，以及各自的优先级，服务器则从中选择一种，使用该算法对响应的消息主体进行压缩，并且发送 Content-Encoding 首部来告知浏览器它选择了哪一种算法。由于该内容协商过程是基于编码类型来选择资源的展现形式的，在响应中， Vary 首部中至少要包含 Accept-Encoding ；这样的话，缓存服务器就可以对资源的不同展现形式进行缓存。</p><p>下面是一个请求响应的 HTTP 报文示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">encrypted</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">area </span><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">Host</span><span style="color:#E1E4E8;">: www.example.com </span></span>
<span class="line"><span style="color:#E1E4E8;">Accept</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;">: gzip, deflate</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">GET</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">encrypted</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">area </span><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">Host</span><span style="color:#24292E;">: www.example.com </span></span>
<span class="line"><span style="color:#24292E;">Accept</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;">: gzip, deflate</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">HTTP</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OK</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">: Tue, </span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;"> Feb </span><span style="color:#79B8FF;">2018</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">06</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">03</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">Server</span><span style="color:#E1E4E8;">: Apache</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">3.7</span><span style="color:#E1E4E8;"> (Unix) (Red</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">Hat</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">Linux) </span></span>
<span class="line"><span style="color:#E1E4E8;">Last</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Modified</span><span style="color:#E1E4E8;">: Wed, </span><span style="color:#79B8FF;">08</span><span style="color:#E1E4E8;"> Jan </span><span style="color:#79B8FF;">2003</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">GMT</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Accept</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Ranges</span><span style="color:#E1E4E8;">: bytes </span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">438</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#B392F0;">Connection</span><span style="color:#E1E4E8;">: close </span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">: text</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">html; charset</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">UTF</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Encoding</span><span style="color:#E1E4E8;">: gzip</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">HTTP</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">OK</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">Date</span><span style="color:#24292E;">: Tue, </span><span style="color:#005CC5;">27</span><span style="color:#24292E;"> Feb </span><span style="color:#005CC5;">2018</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">06</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">03</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">16</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">Server</span><span style="color:#24292E;">: Apache</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">3.7</span><span style="color:#24292E;"> (Unix) (Red</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">Hat</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">Linux) </span></span>
<span class="line"><span style="color:#24292E;">Last</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Modified</span><span style="color:#24292E;">: Wed, </span><span style="color:#005CC5;">08</span><span style="color:#24292E;"> Jan </span><span style="color:#005CC5;">2003</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">23</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">11</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">55</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">GMT</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Accept</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Ranges</span><span style="color:#24292E;">: bytes </span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Length</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">438</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6F42C1;">Connection</span><span style="color:#24292E;">: close </span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">: text</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">html; charset</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">UTF</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">8</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Encoding</span><span style="color:#24292E;">: gzip</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="压缩图片" tabindex="-1">压缩图片 <a class="header-anchor" href="#压缩图片" aria-label="Permalink to &quot;压缩图片&quot;">​</a></h3><p>在图片优化章节中详细说明。</p><h2 id="http-请求数据压缩" tabindex="-1">HTTP 请求数据压缩 <a class="header-anchor" href="#http-请求数据压缩" aria-label="Permalink to &quot;HTTP 请求数据压缩&quot;">​</a></h2><h3 id="头部数据压缩" tabindex="-1">头部数据压缩 <a class="header-anchor" href="#头部数据压缩" aria-label="Permalink to &quot;头部数据压缩&quot;">​</a></h3><p>HTTP 协议不带有状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。</p><p>HTTP/2 对这一点做了优化，引入了头信息压缩机制（header compression）。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了。</p><h3 id="请求体数据压缩" tabindex="-1">请求体数据压缩 <a class="header-anchor" href="#请求体数据压缩" aria-label="Permalink to &quot;请求体数据压缩&quot;">​</a></h3><p>前面我们介绍了 HTTP 协议中的 Accept-Encoding/Content-Encoding 机制。这套机制可以很好地用于文本类响应正文的压缩，可以大幅减少网络传输，从而一直被广泛使用。但 HTTP 请求的发起方（例如浏览器），无法事先知晓要访问的服务端是否支持解压，所以现阶段的浏览器没有压缩请求正文。</p><p>有一些通讯协议基于 HTTP 做了扩展，他们的客户端和服务端是专用的，可以放心大胆地压缩请求正文。例如 WebDAV 客户端就是这样。</p><p>实际的 Web 项目中，会存在请求正文非常大的场景，例如发表长篇博客，上报用于调试的网络数据等等。这些数据如果能在本地压缩后再提交，就可以节省网络流量、减少传输时间。本文介绍如何对 HTTP 请求正文进行压缩，包含如何在服务端解压、如何在客户端压缩两个部分。</p><p>开始之前，先来介绍本文涉及的三种数据压缩格式：</p><ul><li>DEFLATE，是一种使用 Lempel-Ziv 压缩算法（LZ77）和哈夫曼编码的压缩格式。详见 <a href="http://tools.ietf.org/html/rfc1951" target="_blank" rel="noreferrer">RFC 1951</a>；</li><li>ZLIB，是一种使用 DEFLATE 的压缩格式，对应 HTTP 中的 Content-Encoding: deflate。详见 <a href="http://tools.ietf.org/html/rfc1950" target="_blank" rel="noreferrer">RFC 1950</a>；</li><li>GZIP，也是一种使用 DEFLATE 的压缩格式，对应 HTTP 中的 Content-Encoding: gzip。详见 <a href="http://tools.ietf.org/html/rfc1952" target="_blank" rel="noreferrer">RFC 1952</a>；</li></ul><p>Content-Encoding 中的 deflate，实际上是 ZLIB。为了清晰，本文将 DEFLATE 称之为 RAW DEFLATE，ZLIB 和 GZIP 都是 RAW DEFLATE 的不同 Wrapper。</p><p>下面是一个简单示例。</p><ol><li>压缩请求正文数据</li></ol><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rawBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;content=test&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> rawLen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rawBody.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> bufBody </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Uint8Array</span><span style="color:#E1E4E8;">(rawLen); </span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> rawLen; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    bufBody[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> rawBody.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> format </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// gzip | deflate | deflate-raw </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> buf; </span></span>
<span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(format) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.pako.</span><span style="color:#B392F0;">gzip</span><span style="color:#E1E4E8;">(bufBody); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;deflate&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.pako.</span><span style="color:#B392F0;">deflate</span><span style="color:#E1E4E8;">(bufBody); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;deflate-raw&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        buf </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.pako.</span><span style="color:#B392F0;">deflateRaw</span><span style="color:#E1E4E8;">(bufBody); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> xhr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;POST&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/node/&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">setRequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Content-Encoding&#39;</span><span style="color:#E1E4E8;">, format); </span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">setRequestHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">xhr.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(buf);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rawBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;content=test&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> rawLen </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rawBody.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> bufBody </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Uint8Array</span><span style="color:#24292E;">(rawLen); </span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> rawLen; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    bufBody[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> rawBody.</span><span style="color:#6F42C1;">charCodeAt</span><span style="color:#24292E;">(i); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> format </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gzip&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// gzip | deflate | deflate-raw </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> buf; </span></span>
<span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(format) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gzip&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.pako.</span><span style="color:#6F42C1;">gzip</span><span style="color:#24292E;">(bufBody); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;deflate&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.pako.</span><span style="color:#6F42C1;">deflate</span><span style="color:#24292E;">(bufBody); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;deflate-raw&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        buf </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.pako.</span><span style="color:#6F42C1;">deflateRaw</span><span style="color:#24292E;">(bufBody); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;POST&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;/node/&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">setRequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Content-Encoding&#39;</span><span style="color:#24292E;">, format); </span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">setRequestHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(buf);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>在 Node 中解压请求正文中的数据</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> http </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zlib </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;zlib&#39;</span><span style="color:#E1E4E8;">); </span></span>
<span class="line"><span style="color:#E1E4E8;">http.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) { </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> zlibStream; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> encoding </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> req.headers[</span><span style="color:#9ECBFF;">&#39;content-encoding&#39;</span><span style="color:#E1E4E8;">]; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(encoding) { </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        zlibStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zlib.</span><span style="color:#B392F0;">createGunzip</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;deflate&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        zlibStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zlib.</span><span style="color:#B392F0;">createInflate</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;deflate-raw&#39;</span><span style="color:#E1E4E8;">: </span></span>
<span class="line"><span style="color:#E1E4E8;">        zlibStream </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zlib.</span><span style="color:#B392F0;">createInflateRaw</span><span style="color:#E1E4E8;">(); </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span></span>
<span class="line"><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, {</span><span style="color:#9ECBFF;">&#39;Content-Type&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;text/plain&#39;</span><span style="color:#E1E4E8;">}); </span></span>
<span class="line"><span style="color:#E1E4E8;">req.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(zlibStream).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res); }).</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8361</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;127.0.0.1&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> http </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zlib </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;zlib&#39;</span><span style="color:#24292E;">); </span></span>
<span class="line"><span style="color:#24292E;">http.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">) { </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> zlibStream; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> encoding </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> req.headers[</span><span style="color:#032F62;">&#39;content-encoding&#39;</span><span style="color:#24292E;">]; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(encoding) { </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;gzip&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        zlibStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zlib.</span><span style="color:#6F42C1;">createGunzip</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;deflate&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        zlibStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zlib.</span><span style="color:#6F42C1;">createInflate</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;deflate-raw&#39;</span><span style="color:#24292E;">: </span></span>
<span class="line"><span style="color:#24292E;">        zlibStream </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> zlib.</span><span style="color:#6F42C1;">createInflateRaw</span><span style="color:#24292E;">(); </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    } </span></span>
<span class="line"><span style="color:#24292E;">res.</span><span style="color:#6F42C1;">writeHead</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, {</span><span style="color:#032F62;">&#39;Content-Type&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;text/plain&#39;</span><span style="color:#24292E;">}); </span></span>
<span class="line"><span style="color:#24292E;">req.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(zlibStream).</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(res); }).</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8361</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;127.0.0.1&#39;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>实际使用还需要匹配具体的服务器，比如 nginx、Apache 等。</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Compression" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Compression</a></li><li><a href="https://zh.wikipedia.org/wiki/HTTP%E5%8E%8B%E7%BC%A9" target="_blank" rel="noreferrer">https://zh.wikipedia.org/wiki/HTTP压缩</a></li></ul>`,31),e=[o];function r(t,c,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
