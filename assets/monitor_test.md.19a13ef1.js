import{_ as s,c as n,o as a,a as l}from"./app.08be8e03.js";const p="/performance/monitor/12.png",d=JSON.parse('{"title":"性能专项测试","description":"","frontmatter":{},"headers":[{"level":2,"title":"性能测试方案选型","slug":"性能测试方案选型","link":"#性能测试方案选型","children":[]},{"level":2,"title":"性能测试标准设定","slug":"性能测试标准设定","link":"#性能测试标准设定","children":[]},{"level":2,"title":"性能测试环境搭建及测试","slug":"性能测试环境搭建及测试","link":"#性能测试环境搭建及测试","children":[]},{"level":2,"title":"性能测试结果输出","slug":"性能测试结果输出","link":"#性能测试结果输出","children":[]}],"relativePath":"monitor/test.md","lastUpdated":1671093649000}'),e={name:"monitor/test.md"},o=l(`<h1 id="性能专项测试" tabindex="-1">性能专项测试 <a class="header-anchor" href="#性能专项测试" aria-hidden="true">#</a></h1><p>如果有新业务要上线，如何尽量减少它上线后的前端性能问题，避免以后我们手忙脚乱去“救火”呢？我们可以通过性能专项测试，提前于生产环境发现问题。</p><p>什么叫性能专项测试呢？简单来说就是，在业务上线前，我们对性能指标（如首屏时间、白屏时间、页面加载时长等）进行测试，确保上线后性能指标达标。</p><p>那怎么做呢？大致分四步：</p><ul><li>第一步，确定线下测试方案；</li><li>第二步，设定线下测试标准；</li><li>第三步，选用合适的测试环境进行测试及视频分帧计算；</li><li>第四步，输出测试结果。</li></ul><h2 id="性能测试方案选型" tabindex="-1">性能测试方案选型 <a class="header-anchor" href="#性能测试方案选型" aria-hidden="true">#</a></h2><p>未上线的业务，一般有两种方案来做性能测试：使用性能 SDK 和以录制视频的方式进行。</p><p>第一个方案，使用性能 SDK ，比如我们要采集首屏时间指标，就使用 MutationObserver。</p><p>它的优点很明显，线上和线下方案一致。缺点呢？因为业务还没上线，内网测试的访问量有限，从而造成性能平台后端的请求少，无法形成大量的首屏时间分布数据，也就无法在性能平台上可视化展现。</p><p>第二个方案，以录制视频的方式进行性能测试，优点是可以和 QA（Quality Assurance，表示测试人员）现有基础设施相结合。QA 测试时，不仅会测 H5 页面的首屏时间，还会测试 Native 页面的响应时间以及 App 内存使用和 CPU 占用等信息。由于测试项目较多，在这个过程中，QA 团队会沉淀一些测试基础设施，比如 App 代码覆盖率测试工具、异常测试平台、数据构造集成测试平台等，而录制视频是其中必不可少的手段。</p><p>所以，在性能测试上，我一般建议采用录制视频的方式来进行，除此之外，也方便后期的性能计算。</p><p>录制视频一般有手动方案和自动化方案。所谓手动方案就是通过手机自带的视频录制功能来进行，而自动化方案则是通过 adb 录制。前者比较简单也好理解，后者效率会很高，在这里我重点介绍一下通过 adb 录制的自动化方案。</p><p>adb 是 andorid studio下提供的一个工具，在电脑上通过它可以控制模拟器（也就是模拟手机）或者真实的手机设备（需要通过数据线连接到电脑）。比如我们可以通过它打开一个 App 页面，运行 shell 命令，安装软件等功能。</p><p>具体怎么做呢？执行 screenrecord 命令启动录屏功能，代码如下：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">adb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">screenrecord</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--time-limit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/sdcard/perf.mp4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里我设置了录屏时间为 10s ，如果不设置会默认时间为 180s，它会存储到 /sdcard/ 目录下，命名为 video.mp4。</p><p>接下来，我们打开一个 App 的页面，页面开始加载，然后在页面加载结束后，点击 ctrl+C 结束录屏，获得录制结果。</p><p>在录制过程中会有一些坑需要你注意下，大致有这几点。</p><ul><li>有些设备的显示如分辨率过高可能无法录制，如果遇到这种情况可以通过指定分辨率来录制，示例代码如下：</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">adb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">screenrecord</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--size</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1280</span><span style="color:#A6ACCD;">*</span><span style="color:#F78C6C;">720</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/sdcard/perf.mp4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>如果使用的模拟器，要注意模拟器在晃动、多点触摸等操作情况下替代不了真机，模拟器在性能和设备类型上也要慢一些，上限取决于你电脑的性能上限。</li><li>录制过程中不要旋转手机，因为这会造成画面切断。</li><li>可以在命令行显示log，有助于你的调试，如下所示：</li></ul><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">adb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">screenrecord</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--time-limit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/sdcard/perf.mp4</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="性能测试标准设定" tabindex="-1">性能测试标准设定 <a class="header-anchor" href="#性能测试标准设定" aria-hidden="true">#</a></h2><p>既然是要测试，就要有一个标准来判断某个性能是否达标,分频计算的标准，建议采用如下标准：</p><ul><li>白屏响应时间 = 白屏最后 - 帧的时间 - 点击时的起始帧时间</li><li>首屏加载时间 = 内容完全加载出来那一帧的时间 - 点击时的起始帧时间</li></ul><p>如果你想要测试页面是否卡顿，它的标准我在前面也提到过：连续 5 帧超过 50ms，判定为卡顿；单帧渲染超过250ms，就可以判定为严重卡顿。</p><p>确定完时间标准后，紧跟着就是寻找合适的性能测环境，进行录屏然后计算视频分帧。</p><h2 id="性能测试环境搭建及测试" tabindex="-1">性能测试环境搭建及测试 <a class="header-anchor" href="#性能测试环境搭建及测试" aria-hidden="true">#</a></h2><p>所谓的性能测试环境搭建，不是指需要搭建测试服务器及接口测试等，而是寻找合适的网络环境进行测试。由于现在的网络环境多样，比如有 WIFI，有常见的 3G、4G，有少见的 2G 弱网，还有现在流行的 5G 网络，在专项测试的时候，为了提前发现性能问题，我们需要考虑到各种网络环境下的情况。</p><p>做完视频录屏之后，接下来我们当然可以人工去判断首屏结束时间，比如拿秒表去计算时间差。但这样做有两个缺点：一是人工去计算首屏时间的话，前后偏差几百毫秒很正常，准确性没有保证；二是人工判断，效率低，且没法和整体测试链路打通。比如，测试团队还需要对内存占用、CPU使用情况、流量、App 崩溃率等进行测试时，如果采用手动计算，就没法一次性采集到所有指标。</p><p>所以，一般我会建议采取分帧计算的方式进行。具体怎么做呢？主要分为下面三步：</p><ol><li>安装 openCV、python ，通过 Python 的 VideoCapture 将视频分帧存储；</li><li>分帧图片命名，使用当前视频播放时间位置（毫秒）命名存储图片；</li><li>首屏时长计算 = 首屏结束帧文件名；</li></ol><p>最后，我们拿时长和标准对比即可知道性能是否达标。下面是基于 python 借助 openCV 库做的视频分帧计算。</p><div class="language-python line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span><span style="color:#676E95;font-style:italic;">视频分帧</span><span style="color:#89DDFF;font-style:italic;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> cv2</span></span>
<span class="line"><span style="color:#A6ACCD;">vc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> cv2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">VideoCapture</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">C:</span><span style="color:#A6ACCD;">\\U</span><span style="color:#C3E88D;">sers</span><span style="color:#A6ACCD;">\\a</span><span style="color:#C3E88D;">dmin\\Desktop</span><span style="color:#F07178;">\\1</span><span style="color:#C3E88D;">.mp4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 读入视频文件，命名cv</span></span>
<span class="line"><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 计数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> vc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isOpened</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 判断是否正常打开</span></span>
<span class="line"><span style="color:#A6ACCD;">    rval</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> frame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    rval </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">False</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">timeF </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 视频帧计数间隔频率</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> rval</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 循环读取视频帧</span></span>
<span class="line"><span style="color:#A6ACCD;">    rval</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> frame </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> vc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> timeF </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 每隔timeF帧进行存储操作</span></span>
<span class="line"><span style="color:#A6ACCD;">        i </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        cv2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">imwrite</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">r</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">C:</span><span style="color:#A6ACCD;">\\U</span><span style="color:#C3E88D;">sers</span><span style="color:#A6ACCD;">\\a</span><span style="color:#C3E88D;">dmin\\Desktop</span><span style="color:#F07178;">\\1</span><span style="color:#C3E88D;">/{}.jpg</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">format</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">),</span><span style="color:#82AAFF;"> frame</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 存储为图像</span></span>
<span class="line"><span style="color:#A6ACCD;">    n </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    cv2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">waitKey</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">vc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">release</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>首先，我引入 CV2 库，通过 VideoCapture 读入视频文件，然后通过设置计数间隔频率，比如我这里设置的是 10ms，循环来获取视频，最后通过 cv2.imwrite 来写入文件目录，我们就可以直接看该目录下的文件。</p><h2 id="性能测试结果输出" tabindex="-1">性能测试结果输出 <a class="header-anchor" href="#性能测试结果输出" aria-hidden="true">#</a></h2><p>拿到视频分帧结果后，见下图 <img src="`+p+'" alt=""> 图中一张一张的图片就是分帧处理的结果，文件名代表着加载帧时对应的时间，比如我们找到第14 张的图片，判断这个就是白屏结束的位置，对应图片文件是2691.jpg，也就是说首屏时间是 2691ms。对照一下标准，WIFI 下首屏时间 2691ms，属于比较慢的情况，需要做优化。</p>',37),t=[o];function r(c,i,y,C,D,A){return a(),n("div",null,t)}const m=s(e,[["render",r]]);export{d as __pageData,m as default};
