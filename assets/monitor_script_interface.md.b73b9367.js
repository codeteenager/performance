import{_ as s,c as n,o as a,a as l}from"./app.f528edab.js";const A=JSON.parse('{"title":"接口监控","description":"","frontmatter":{},"headers":[{"level":2,"title":"请求采集","slug":"请求采集","link":"#请求采集","children":[{"level":3,"title":"请求信息","slug":"请求信息","link":"#请求信息","children":[]}]}],"relativePath":"monitor/script/interface.md","lastUpdated":1671034723000}'),p={name:"monitor/script/interface.md"},e=l(`<h1 id="接口监控" tabindex="-1">接口监控 <a class="header-anchor" href="#接口监控" aria-hidden="true">#</a></h1><p>接口请求的性能和稳定性是前端页面中至关重要的一个环节。用户的所有操作都是在页面上进行的，而页面上展示和提交的数据都依赖接口。</p><p>通过建立前端接口监控系统，可以监控并记录所有接口请求的返回状态和返回结果。当接口报错时，能够及时定位线上问题产生的原因。开发人员还能通过分析接口的平均耗时、成功率等信息对应用进行优化，提升系统的质量。</p><h2 id="请求采集" tabindex="-1">请求采集 <a class="header-anchor" href="#请求采集" aria-hidden="true">#</a></h2><h3 id="请求信息" tabindex="-1">请求信息 <a class="header-anchor" href="#请求信息" aria-hidden="true">#</a></h3><p>开发人员如果要进行接口监控，就必须先明确需要采集的信息。可以直接参考HTTP请求的发起方式，对接口请求的路径、方法、入参及响应结果等信息进行采集。为了方便追溯请求的发起页面地址，还可以使用window.location API来获取页面的URL信息。可以定义出如下数据结构来记录每个请求的信息。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HttpRecord</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">url</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">TypeMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求参数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;">TypeMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求主体</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">status</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//HTTP状态码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">caceled</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求是否被取消</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requestHeaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求报头</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">responseHeaders</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TypeMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">&gt;;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//响应报头</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">requestStamp</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求发起时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">responseStamp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求响应时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">costTime</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求耗费时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">responseData</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//请求响应结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">pageUrl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">//发起请求时的页面地址</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>method代表请求方法，常见的有GET、POST、PUT、DELETE 4种。</li><li>url代表请求路径，例如，/api/v1/person/list代表用于查找人物列表的接口。</li><li>query代表请求路径中的请求参数，当url中不存在请求参数时，query为undefined；当url中存在请求参数时，可以从url中提取出对应的query对象。例如，/api/v1/person/info？career=worker&amp;gender=male，代表查询男性并且职业为工人的人物类别，从url中提取出来的query对象如下。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">career</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">worker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gender</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">male</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>body代表请求体，它的数据格式和HTTP请求头报文中的Content-Type有关。当Content-Type的值为application/json时，代表请求体中的数据是JSON格式的，它是开发中使用最多的数据类型。</li><li>status代表请求响应的HTTP状态码，用于标记请求的状态。</li><li>canceled代表请求是否被取消，用于判断请求被取消的异常情况。</li><li>requestHeaders代表请求报头的信息，可以排查接口请求的自定义报头等信息。</li><li>responseHeaders代表响应报头的信息，可以排查接口响应的信息。</li><li>requestStamp代表请求发起的时间戳，可以统计同一时间段内请求发起的数量，用于分析高频请求、重复请求等。</li><li>responseStamp代表请求响应的时间戳，可以和requestStamp结合使用，计算出costTime。</li><li>costTime代表请求从发起到结束耗费的时间，单位是毫秒，可以统计请求平均耗时、慢请求等信息。</li><li>responseData代表请求响应的结果，可以判断该请求是否属于正常的业务逻辑返回，从而监控业务异常。</li><li>pageUrl代表请求发起时的页面地址，可以判断当前请求是从哪个页面发起的，帮助开发人员快速定位异常接口。</li></ul><p>按照以上定义的数据结构，开发人员可以有效地采集接口中的数据，并基于采集到的数据制定监控措施。</p>`,11),o=[e];function r(t,c,y,F,D,i){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{A as __pageData,u as default};
