import{_ as e,o as i,c as a,R as t}from"./chunks/framework.LGcbqaZT.js";const u=JSON.parse('{"title":"Web 性能测试","description":"","frontmatter":{},"headers":[],"relativePath":"optimization/test/index.md","filePath":"optimization/test/index.md","lastUpdated":1683291227000}'),l={name:"optimization/test/index.md"},o=t('<h1 id="web-性能测试" tabindex="-1">Web 性能测试 <a class="header-anchor" href="#web-性能测试" aria-label="Permalink to &quot;Web 性能测试&quot;">​</a></h1><p>作为网站应用的开发者或维护者，我们需要时常关注网站当前的健康状况，譬如在主流程运行正常的情况下，各方面性能体验是否满足期望，是否存在改进与提升的空间，如何进行快速且准确的问题定位等，为了满足这些诉求，我们需要进行全面且客观的性能检测。</p><h2 id="性能检测的认知" tabindex="-1">性能检测的认知 <a class="header-anchor" href="#性能检测的认知" aria-label="Permalink to &quot;性能检测的认知&quot;">​</a></h2><p>性能检测作为性能优化过程中的一环，它的目的通常是给后续优化工作提供指导方向、参考基线及前后对比的依据。性能检测并不是一次性执行结束后就完成的工作，它会在检测、记录和改进的迭代过程中不断重复，来协助网站的性能优化不断接近期望的效果。</p><p>在展开介绍性能检测的方法和工具之前，我们首先需要破除有关性能的一些错误认知与理解偏差。</p><ol><li>不要通过单一指标就能衡量网站的性能体验。这是完全站在用户感知的角度上产生的认知，它只会有主观上的好与差，很难给出切实可行的优化建议。因此我们建议应当从更多维度、更多具体的指标角度来考量网站应用的性能表现，比如页面的首屏渲染时间，不同类型资源的加载次数与速度，缓存的命中率等。</li><li>不要一次检测就能得到网站性能表现的客观结果。网站应用的实际性能表现通常是高度可变的，因为它会受到许多因素的影响，比如用户使用的设备状况、当前网络的连接速度等，因此若想通过性能检测来得到较为客观的优化指导，就不能仅依赖一次检测的数据，而需要在不同环境下收集尽量多的数据，然后以此来进行性能分析。</li><li>不要仅在开发环境中模拟进行性能检测。在开发环境中模拟进行的性能检测具有许多优势：比如可以很方便地制定当前检测的设备状况与网络速度，可以对检测结果进行重复调试，但因其所能覆盖的场景有限，会很容易陷入“幸存者偏差”，即所发现的问题可能并非实际的性能瓶颈。</li></ol><p>据此可知，我们若想通过检测来进行有效的性能优化改进，就需要从尽可能多的角度对网站性能表现进行考量，同时保证检测环境的客观多样，能够让分析得出的结果更加贴近真实的性能瓶颈，这无疑会花费大量的时间与精力，所以在进行性能优化之前我们还需要考虑所能投入的优化成本。</p><h2 id="常见的检测工具" tabindex="-1">常见的检测工具 <a class="header-anchor" href="#常见的检测工具" aria-label="Permalink to &quot;常见的检测工具&quot;">​</a></h2><ul><li><p>Lighthouse</p></li><li><p>WebPageTest</p></li><li><p>浏览器 DevTools</p><ul><li>浏览器任务管理器</li><li>Network 面板</li><li>Coverage 面板</li><li>Memory 面板</li><li>Performance 面板</li><li>Performance monitor 面板</li></ul></li><li><p>性能监控 API</p></li><li><p>持续的性能监控方案</p></li></ul>',9),r=[o];function n(s,p,d,c,_,h){return i(),a("div",null,r)}const f=e(l,[["render",n]]);export{u as __pageData,f as default};
