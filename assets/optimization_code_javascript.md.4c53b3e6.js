import{_ as e,c as a,o as i,a as l}from"./app.3870ccc4.js";const S=JSON.parse('{"title":"JavaScript优化","description":"","frontmatter":{},"headers":[{"level":2,"title":"提升JS文件加载性能","slug":"提升js文件加载性能","link":"#提升js文件加载性能","children":[]},{"level":2,"title":"JS变量和函数优化","slug":"js变量和函数优化","link":"#js变量和函数优化","children":[]},{"level":2,"title":"JS动画优化","slug":"js动画优化","link":"#js动画优化","children":[]},{"level":2,"title":"合理使用缓存","slug":"合理使用缓存","link":"#合理使用缓存","children":[]}],"relativePath":"optimization/code/javascript.md","lastUpdated":1671034723000}'),t={name:"optimization/code/javascript.md"},r=l('<h1 id="javascript优化" tabindex="-1">JavaScript优化 <a class="header-anchor" href="#javascript优化" aria-hidden="true">#</a></h1><p>JS优化的原则是当需要时才优化，没有必要每次项目开发时都要优化，而是当项目有大的改版，代码无法维护时去考虑做优化。优化完后考虑其维护性。</p><h2 id="提升js文件加载性能" tabindex="-1">提升JS文件加载性能 <a class="header-anchor" href="#提升js文件加载性能" aria-hidden="true">#</a></h2><ul><li>加载元素的顺序CSS文件放在<code>&lt;head&gt;</code>里，JS文件放在<code>&lt;body&gt;</code>里</li></ul><h2 id="js变量和函数优化" tabindex="-1">JS变量和函数优化 <a class="header-anchor" href="#js变量和函数优化" aria-hidden="true">#</a></h2><ul><li>尽量使用id选择器，id选择器查询是最快的</li><li>尽量避免使用eval，eval非常损耗性能</li><li>JS函数尽可能保持简洁</li><li>使用事件节流函数</li><li>使用事件委托，当我们ul下有li、a等标签，设置点击事件的时候可以设置在父元素ul中。</li></ul><h2 id="js动画优化" tabindex="-1">JS动画优化 <a class="header-anchor" href="#js动画优化" aria-hidden="true">#</a></h2><ul><li>避免添加大量JS动画</li><li>尽量使用CSS3动画</li><li>尽量使用Canvas动画</li><li>合理使用requestAnimationFrame动画代替setTimeout、setInterval，requestAnimationFrame可以在正确时间进行渲染，setTimeout和setInterval无法保证callback回调函数的执行时机</li></ul><h2 id="合理使用缓存" tabindex="-1">合理使用缓存 <a class="header-anchor" href="#合理使用缓存" aria-hidden="true">#</a></h2><ul><li>合理缓存DOM对象，浏览器每次查询DOM对象很消耗时间</li><li>缓存列表长度，把列表下li的长度缓存起来，不需要每次查询列表长度</li><li>使用可缓存的ajax</li></ul>',10),s=[r];function d(n,c,o,h,u,_){return i(),a("div",null,s)}const j=e(t,[["render",d]]);export{S as __pageData,j as default};
