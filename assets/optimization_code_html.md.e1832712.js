import{_ as t,o as a,c as i,V as l}from"./chunks/framework.eec8105e.js";const u=JSON.parse('{"title":"HTML优化","description":"","frontmatter":{},"headers":[],"relativePath":"optimization/code/html.md","filePath":"optimization/code/html.md","lastUpdated":1683291227000}'),e={name:"optimization/code/html.md"},o=l('<h1 id="html优化" tabindex="-1">HTML优化 <a class="header-anchor" href="#html优化" aria-label="Permalink to &quot;HTML优化&quot;">​</a></h1><h2 id="精简html代码" tabindex="-1">精简HTML代码 <a class="header-anchor" href="#精简html代码" aria-label="Permalink to &quot;精简HTML代码&quot;">​</a></h2><ul><li>减少HTML的嵌套，减少其层级关系</li><li>减少DOM节点数，尽可能优化压缩DOM节点数</li><li>减少无语义代码，比如<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>消除浮动</li><li>删除http或https，如果URL协议头和当前页面协议头一致的，或者此URL在多个协议头都是可用的，则可以考虑删除协议头</li><li>删除多余的空格、换行符、缩进和不必要的注释，可以用压缩工具来处理</li><li>省略冗余的标签和属性</li><li>使用相对路径的URL</li></ul><h2 id="文件放在合适位置" tabindex="-1">文件放在合适位置 <a class="header-anchor" href="#文件放在合适位置" aria-label="Permalink to &quot;文件放在合适位置&quot;">​</a></h2><ul><li>CSS样式文件链接尽量放在页面头部：CSS加载不会阻塞DOM tree解析，但是会阻塞DOM tree渲染，也会阻塞后面JS执行。任何body元素之前，可以确保在文档部分中解析了所有CSS样式(内联和外联)，从而减少了浏览器必须重排文档的次数。如果放置页面底部，就要等待最后一个CSS文件下载完成，此时会白屏，影响用户体验。</li><li>JS引用放在HTML底部：防止JS的加载、解析、执行对阻塞页面后续元素的正常渲染。</li></ul><h2 id="增强用户体验" tabindex="-1">增强用户体验 <a class="header-anchor" href="#增强用户体验" aria-label="Permalink to &quot;增强用户体验&quot;">​</a></h2><ul><li>设置favicon.ico：网站如果不设置favicon.ico，控制台会报错，另外页面加载过程中也没有图标loading过程，同时也不利于记忆网站品牌，建议统一添加。</li><li>增加首屏必要的CSS和JS：页面如果需要等待所依赖的JS和CSS加载完成才显示，则在渲染过程中页面会一直显示空白，影响用户体验，建议增加首屏必要的CSS和JS，比如页面框架背景图片或者loading图标，内联在HTML页面中。这样做，首屏能快速显示出来，相对减少用户对页面加载等待过程。</li></ul>',7),r=[o];function c(d,n,h,s,_,S){return a(),i("div",null,r)}const p=t(e,[["render",c]]);export{u as __pageData,p as default};
