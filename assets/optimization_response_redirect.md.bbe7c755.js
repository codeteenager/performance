import{_ as t,c as e,o as d,a as r}from"./app.9cfc9215.js";const a="/performance/optimization/27.png",u=JSON.parse('{"title":"避免重定向","description":"","frontmatter":{},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"永久重定向","slug":"永久重定向","link":"#永久重定向","children":[]},{"level":2,"title":"临时重定向","slug":"临时重定向","link":"#临时重定向","children":[]},{"level":2,"title":"特殊重定向","slug":"特殊重定向","link":"#特殊重定向","children":[]}],"relativePath":"optimization/response/redirect.md","lastUpdated":1670212237000}'),i={name:"optimization/response/redirect.md"},l=r('<h1 id="避免重定向" tabindex="-1">避免重定向 <a class="header-anchor" href="#避免重定向" aria-hidden="true">#</a></h1><blockquote><p>参考： <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections</a> URL 重定向，也称为 URL 转发，是一种当实际资源，如单个页面、表单或者整个 Web 应用被迁移到新的 URL 下的时候，保持（原有）链接可用的技术。HTTP 协议提供了一种特殊形式的响应—— HTTP 重定向（HTTP redirects）来执行此类操作。</p></blockquote><p>重定向可实现许多目标：</p><ul><li>站点维护或停机期间的临时重定向。</li><li>永久重定向将在更改站点的URL，上传文件时的进度页等之后保留现有的链接/书签。</li><li>上传文件时的表示进度的页面。</li></ul><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-hidden="true">#</a></h2><p>在 HTTP 协议中，重定向操作由服务器通过发送特殊的响应（即 redirects）而触发。HTTP 协议的重定向响应的状态码为 3xx 。</p><p>浏览器在接收到重定向响应的时候，会采用该响应提供的新的 URL ，并立即进行加载；大多数情况下，除了会有一小部分性能损失之外，重定向操作对于用户来说是不可见的。 <img src="'+a+'" alt=""></p><p>不同类型的重定向映射可以划分为三个类别：</p><ul><li>永久重定向</li><li>临时重定向</li><li>特殊重定向</li></ul><h2 id="永久重定向" tabindex="-1">永久重定向 <a class="header-anchor" href="#永久重定向" aria-hidden="true">#</a></h2><p>这种重定向操作是永久性的。它表示原 URL 不应再被使用，而应该优先选用新的 URL。搜索引擎机器人会在遇到该状态码时触发更新操作，在其索引库中修改与该资源相关的 URL 。</p><table><thead><tr><th>编码</th><th>含义</th><th>处理方法</th><th>典型应用场景</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。</td><td>网站重构。</td></tr><tr><td>308</td><td>Permanent Redirect</td><td>方法和消息主体都不发生变化。</td><td>网站重构，用于非GET方法。(with non-GET links/operations)</td></tr></tbody></table><h2 id="临时重定向" tabindex="-1">临时重定向 <a class="header-anchor" href="#临时重定向" aria-hidden="true">#</a></h2><p>有时候请求的资源无法从其标准地址访问，但是却可以从另外的地方访问。在这种情况下可以使用临时重定向。</p><p>搜索引擎不会记录该新的、临时的链接。在创建、更新或者删除资源的时候，临时重定向也可以用于显示临时性的进度页面。</p><table><thead><tr><th>编码</th><th>含义</th><th>处理方法</th><th>典型应用场景</th></tr></thead><tbody><tr><td>302</td><td>Found</td><td>GET 方法不会发生变更，其他方法有可能会变更为 GET 方法。</td><td>由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。</td></tr><tr><td>303</td><td>See Other</td><td>GET 方法不会发生变更，其他方法会变更为 GET 方法（消息主体会丢失）。</td><td>用于PUT 或 POST 请求完成之后进行页面跳转来防止由于页面刷新导致的操作的重复触发。</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>方法和消息主体都不发生变化。</td><td>由于不可预见的原因该页面暂不可用。在这种情况下，搜索引擎不会更新它们的链接。当站点支持非 GET 方法的链接或操作的时候，该状态码优于 302 状态码。</td></tr></tbody></table><h2 id="特殊重定向" tabindex="-1">特殊重定向 <a class="header-anchor" href="#特殊重定向" aria-hidden="true">#</a></h2><p>除了上述两种常见的重定向之外，还有两种特殊的重定向。304 （Not Modified，资源未被修改）会使页面跳转到本地陈旧的缓存版本当中（该缓存已过期(?)），而 300 （Multiple Choice，多项选择） 则是一种手工重定向：以 Web 页面形式呈现在浏览器中的消息主体包含了一个可能的重定向链接的列表，用户可以从中进行选择。</p><table><thead><tr><th>编码</th><th>含义</th><th>典型应用场景</th></tr></thead><tbody><tr><td>300</td><td>Multiple Choice</td><td>不常用：所有的选项在消息主体的 HTML 页面中列出。鼓励在 Link 头部加入机器可读的 rel=alternate</td></tr><tr><td>304</td><td>Not Modified</td><td>发送用于重新验证的条件请求。表示缓存的响应仍然是新鲜的并且可以使用。</td></tr></tbody></table>',19),h=[l];function o(n,s,c,p,T,_){return d(),e("div",null,h)}const m=t(i,[["render",o]]);export{u as __pageData,m as default};
