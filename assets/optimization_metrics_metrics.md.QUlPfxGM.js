import{_ as t,o as e,c as a,R as r,aj as i,ak as l,al as o,am as d,an as s,ao as p,ap as c,aq as h,ar as n,as as m}from"./chunks/framework.LGcbqaZT.js";const w=JSON.parse('{"title":"基于用户体验的性能指标","description":"","frontmatter":{},"headers":[],"relativePath":"optimization/metrics/metrics.md","filePath":"optimization/metrics/metrics.md","lastUpdated":1683291227000}'),b={name:"optimization/metrics/metrics.md"},u=r('<h1 id="基于用户体验的性能指标" tabindex="-1">基于用户体验的性能指标 <a class="header-anchor" href="#基于用户体验的性能指标" aria-label="Permalink to &quot;基于用户体验的性能指标&quot;">​</a></h1><p><a href="https://web.dev/metrics/" target="_blank" rel="noreferrer">基于用户体验的性能指标</a>是 Google 在 web.dev 提出的。其中包括以下几个比较重要的性能指标：</p><ul><li>FCP</li><li>LCP</li><li>FID</li><li>TTI</li><li>TBT</li><li>CLS</li></ul><h2 id="first-contentful-paint-fcp" tabindex="-1">First Contentful Paint（FCP） <a class="header-anchor" href="#first-contentful-paint-fcp" aria-label="Permalink to &quot;First Contentful Paint（FCP）&quot;">​</a></h2><p>FCP（First Contentful Paint）首次内容绘制，浏览器首次绘制来自 DOM 的内容的时间，内容必须是文本、图片（包含背景图）、非白色的 canvas 或 SVG，也包括带有正在加载中的 Web 字体的文本。 <img src="'+i+'" alt=""> 这是用户第一次开始看到页面内容，但仅仅有内容，并不意味着它是有用的内容（例如 Header、导航栏等），也不意味着有用户要消费的内容。</p><h3 id="速度指标" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>FCP 时间（以秒为单位）</th><th>颜色编码</th><th>FCP分数（HTTP存档百分位数）</th></tr></thead><tbody><tr><td>0–2</td><td>绿色（快速）</td><td>75–100</td></tr><tr><td>2–4</td><td>橙色（中等）</td><td>50–74</td></tr><tr><td>超过4</td><td>红色（慢）</td><td>0–49</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">优化方案</p><p><a href="https://web.dev/fcp/#how-to-improve-fcp" target="_blank" rel="noreferrer">https://web.dev/fcp/#how-to-improve-fcp</a></p></div><h2 id="largest-contentful-paint-lcp" tabindex="-1">Largest Contentful Paint（LCP） <a class="header-anchor" href="#largest-contentful-paint-lcp" aria-label="Permalink to &quot;Largest Contentful Paint（LCP）&quot;">​</a></h2><p>LCP（Largest Contentful Paint）最大内容绘制，可视区域中最大的内容元素呈现到屏幕上的时间，用以估算页面的主要内容对用户可见时间。</p><p>LCP 考虑的元素：</p><ul><li><code>&lt;img&gt;</code> 元素</li><li><code>&lt;image&gt;</code> 元素内的 <code>&lt;svg&gt;</code> 元素</li><li><code>&lt;video&gt;</code> 元素（封面图）</li><li>通过 <code>url()</code> 函数加载背景图片的元素</li><li>包含文本节点或其他内联级文本元素子级的块级元素</li></ul><p>为了提供良好的用户体验，网站应力争使用 2.5 秒或更短的“最大内容绘画” 。为确保您达到大多数用户的这一目标，衡量移动设备和台式机设备的页面加载量的第75个百分位数是一个很好的衡量标准。</p><p>以下是一些示例： <img src="'+l+'" alt=""><img src="'+o+'" alt=""></p><p>在以上两个时间轴中，最大的元素随内容加载而变化。在第一个示例中，新内容被添加到DOM中，并且更改了最大的元素。在第二个示例中，布局发生更改，以前最大的内容从视口中删除。</p><p>通常情况下，延迟加载的内容要比页面上已有的内容大，但不一定是这种情况。接下来的两个示例显示了在页面完全加载之前发生的最大内容绘画。 <img src="'+d+'" alt=""><img src="'+s+'" alt=""></p><p>在第一个示例中，Instagram 徽标相对较早地加载，即使逐渐显示其他内容，它仍然是最大的元素。在 Google 搜索结果页面示例中，最大的元素是一段文本，该文本在任何图像或徽标加载完成之前显示。由于所有单个图像均小于此段，因此在整个加载过程中，它始终是最大的元素。</p><blockquote><p>在 Instagram 时间轴的第一帧中，您可能会注意到相机徽标周围没有绿色框。那是因为它是一个 <code>&lt;svg&gt;</code> 元素，并且 <code>&lt;svg&gt;</code> 元素当前不被视为 LCP 候选对象。</p></blockquote><h3 id="速度指标-1" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-1" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>LCP 时间（以秒为单位）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0-2.5</td><td>绿色（快速）</td></tr><tr><td>2.5-4</td><td>橙色（中等）</td></tr><tr><td>超过4</td><td>红色（慢）</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">优化方案</p><p><a href="https://web.dev/optimize-lcp/" target="_blank" rel="noreferrer">https://web.dev/optimize-lcp/</a></p></div><h2 id="first-input-delay-fid" tabindex="-1">First Input Delay（FID） <a class="header-anchor" href="#first-input-delay-fid" aria-label="Permalink to &quot;First Input Delay（FID）&quot;">​</a></h2><p>FID（First Input Delay）首次输入延迟，从用户第一次与页面交互（例如单击链接、点击按钮等）到浏览器实际能够响应该交互的时间。</p><p>输入延迟是因为浏览器的主线程正忙于做其他事情，所以不能响应用户。发生这种情况的一个常见原因是浏览器正忙于解析和执行应用程序加载的大量计算的 JavaScript。</p><p>第一次输入延迟通常发生在第一次内容绘制（FCP）和可持续交互时间（TTI）之间，因为页面已经呈现了一些内容，但还不能可靠地交互。</p><p><img src="'+p+'" alt=""></p><p>如上图所示，浏览器接收到用户输入操作时，主线程正在忙于执行一个耗时比较长的任务，只有当这个任务执行完成后，浏览器才能响应用户的输入操作。它必须等待的时间就此页面上该用户的 FID 值。</p><p>例如，以下所有 HTML 元素都需要在响应用户交互之前等待主线程上正在进行的任务完成：</p><ul><li>文本输入框，复选框和单选按钮（<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>）</li><li>选择下拉菜单（<code>&lt;select&gt;</code>）</li><li>链接（<code>&lt;a&gt;</code>）</li></ul><h3 id="速度指标-2" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-2" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><p><img src="'+c+'" alt=""></p><div class="tip custom-block"><p class="custom-block-title">优化方案</p><ul><li><a href="https://web.dev/fid/#how-to-improve-fid" target="_blank" rel="noreferrer">https://web.dev/fid/#how-to-improve-fid</a></li><li><a href="https://web.dev/optimize-fid/" target="_blank" rel="noreferrer">https://web.dev/optimize-fid/</a></li></ul></div><h2 id="time-to-interactive-tti" tabindex="-1">Time to Interactive（TTI） <a class="header-anchor" href="#time-to-interactive-tti" aria-label="Permalink to &quot;Time to Interactive（TTI）&quot;">​</a></h2><p>表示网页第一次 完全达到可交互状态 的时间点，浏览器已经可以持续性的响应用户的输入。完全达到可交互状态的时间点是在最后一个长任务（Long Task）完成的时间, 并且在随后的 5 秒内网络和主线程是空闲的。 从定义上来看，中文名称叫可持续交互时间或可流畅交互时间更合适。</p><blockquote><p>长任务是需要 50 毫秒以上才能完成的任务 <img src="'+h+'" alt=""></p></blockquote><h3 id="速度指标-3" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-3" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>TTI指标（以秒为单位）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0–3.8</td><td>绿色（快速）</td></tr><tr><td>3.9–7.3</td><td>橙色（中等）</td></tr><tr><td>7.3以上</td><td>红色（慢）</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">优化方案</p><p><a href="https://web.dev/tti/#how-to-improve-tti" target="_blank" rel="noreferrer">https://web.dev/tti/#how-to-improve-tti</a></p></div><h2 id="total-block-time-tbt" tabindex="-1">Total Block Time（TBT） <a class="header-anchor" href="#total-block-time-tbt" aria-label="Permalink to &quot;Total Block Time（TBT）&quot;">​</a></h2><p>Total Block Time（TBT）总阻塞时间，度量了 FCP 和 TTI 之间的总时间，在该时间范围内，主线程被阻塞足够长的时间以防止输入响应。</p><p>只要存在长任务，该主线程就会被视为“阻塞”，该任务在主线程上运行超过50毫秒（ms）。我们说主线程“被阻止”是因为浏览器无法中断正在进行的任务。因此，如果用户确实在较长的任务中间与页面进行交互，则浏览器必须等待任务完成才能响应。</p><p>如果任务足够长（例如，超过50毫秒的任何时间），则用户很可能会注意到延迟并感觉页面缓慢或过时。</p><p>给定的长任务的阻止时间是其持续时间超过50毫秒。页面的总阻塞时间是FCP和TTI之间发生的每个长任务的阻塞时间的总和。</p><p>例如，考虑页面加载期间浏览器主线程的下图：</p><p><img src="'+n+'" alt=""></p><p>上面的时间轴有五个任务，其中三个是长任务，因为它们的持续时间超过50毫秒。下图显示了每个长任务的阻塞时间：</p><p><img src="'+m+'" alt=""></p><p>因此，虽然在主线程上运行任务花费的总时间为560毫秒，但只有345毫秒的时间被视为阻塞时间。</p><h3 id="速度指标-4" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-4" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>TBT时间 （以毫秒为单位）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0–300</td><td>绿色（快速）</td></tr><tr><td>300-600</td><td>橙色（中等）</td></tr><tr><td>超过600</td><td>红色（慢）</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">优化方案</p><p><a href="https://web.dev/tbt/#how-to-improve-tbt" target="_blank" rel="noreferrer">https://web.dev/tbt/#how-to-improve-tbt</a></p></div><h2 id="cumulative-layout-shift-cls" tabindex="-1">Cumulative Layout Shift（CLS） <a class="header-anchor" href="#cumulative-layout-shift-cls" aria-label="Permalink to &quot;Cumulative Layout Shift（CLS）&quot;">​</a></h2><p>Cumulative Layout Shift（CLS）累计布局偏移，CLS 会测量在页面整个生命周期中发生的每个意外的布局移位的所有单独布局移位分数的总和，它是一种保证页面的视觉稳定性从而提升用户体验的指标方案。</p><p>您是否曾经在页面上突然发生变化时在没有警告的情况下，文字移动了，并且您失去了位置。甚至更糟：您将要点击一个链接或一个按钮，但是在手指落下的瞬间，链接移动了，您最终单击了其他东西！</p><p>页面内容的意外移动通常是由于异步加载资源或将 DOM 元素动态添加到现有内容上方的页面而发生的。罪魁祸首可能是尺寸未知的图像或视频，呈现比其后备更大或更小的字体，或者是动态调整自身大小的第三方广告或小部件。</p><h3 id="速度指标-5" tabindex="-1">速度指标 <a class="header-anchor" href="#速度指标-5" aria-label="Permalink to &quot;速度指标&quot;">​</a></h3><table><thead><tr><th>CLS 时间（以毫秒为单位）</th><th>颜色编码</th></tr></thead><tbody><tr><td>0–0.1</td><td>绿色（快速）</td></tr><tr><td>0.1-0.25</td><td>橙色（中等）</td></tr><tr><td>超过0.25</td><td>红色（慢）</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">优化方案</p><ul><li><a href="https://web.dev/cls/#how-to-improve-cls" target="_blank" rel="noreferrer">https://web.dev/cls/#how-to-improve-cls</a></li><li><a href="https://web.dev/optimize-cls/" target="_blank" rel="noreferrer">https://web.dev/optimize-cls/</a></li></ul></div>',58),f=[u];function v(_,k,g,T,P,C){return e(),a("div",null,f)}const I=t(b,[["render",v]]);export{w as __pageData,I as default};
